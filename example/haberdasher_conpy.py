# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/conpy/protoc-gen-conpy.  DO NOT EDIT!
# source: haberdasher.proto

import httpx

from typing import Protocol

from conpy.async_client import AsyncConPyClient
from conpy.base import Endpoint
from conpy.server import ConPyServer
from conpy.client import ConPyClient
from conpy.context import ServiceContext

import haberdasher_pb2 as _pb2


class HaberdasherService(Protocol):
    async def MakeHat(self, req: _pb2.Size, ctx: ServiceContext) -> _pb2.Hat:
        ...


class HaberdasherServer(ConPyServer):
    def __init__(self, *, service: HaberdasherService, server_path_prefix=""):
        super().__init__(service=service)
        self._prefix = f"{server_path_prefix}/i2y.conpy.example.Haberdasher"
        self._endpoints = {
            "MakeHat": Endpoint[_pb2.Size, _pb2.Hat](
                service_name="Haberdasher",
                name="MakeHat",
                function=getattr(service, "MakeHat"),
                input=_pb2.Size,
                output=_pb2.Hat,
            ),
        }


class HaberdasherClient(ConPyClient):
    def MakeHat(
        self,
        *,
        request,
        ctx,
        server_path_prefix="",
        **kwargs,
    ):
        return self._make_request(
            url=f"{server_path_prefix}/i2y.conpy.example.Haberdasher/MakeHat",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Hat,
            **kwargs,
        )


class AsyncHaberdasherClient(AsyncConPyClient):
    async def MakeHat(
        self,
        *,
        request,
        ctx,
        server_path_prefix="",
        session: httpx.AsyncClient | None = None,
        **kwargs,
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/i2y.conpy.example.Haberdasher/MakeHat",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Hat,
            session=session,
            **kwargs,
        )
