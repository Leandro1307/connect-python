package generator

import "text/template"

type ConPyTemplateVariables struct {
	FileName              string
	FileNameWithoutSuffix string
	Services              []*ConPyService
}

type ConPyService struct {
	ServiceURL string
	Name       string
	Comment    string
	Methods    []*ConPyMethod
}

type ConPyMethod struct {
	ServiceURL  string
	ServiceName string
	Name        string
	Comment     string
	InputType   string
	OutputType  string
}

type ConPyImport struct {
	From   string
	Import string
}

// ConPyTemplate - Template for conpy server and client
var ConPyTemplate = template.Must(template.New("ConPyTemplate").Parse(`# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/conpy/protoc-gen-conpy.  DO NOT EDIT!
# source: {{.FileName}}

import httpx

from typing import Protocol

from conpy.async_client import AsyncConPyClient
from conpy.base import Endpoint
from conpy.server import ConPyServer
from conpy.client import ConPyClient
from conpy.context import ServiceContext

import {{.FileNameWithoutSuffix}}_pb2 as _pb2

{{range .Services}}
class {{.Name}}Service(Protocol):{{- range .Methods }}
	async def {{.Name}}(self, req: _pb2.{{.InputType}}, ctx: ServiceContext) -> _pb2.{{.OutputType}}:
		...{{- end }}


class {{.Name}}Server(ConPyServer):
	def __init__(self, *, service: {{.Name}}Service, server_path_prefix=""):
		super().__init__(service=service)
		self._prefix = f"{server_path_prefix}/{{.ServiceURL}}"
		self._endpoints = { {{- range .Methods }}
			"{{.Name}}": Endpoint[_pb2.{{.InputType}}, _pb2.{{.OutputType}}](
				service_name="{{.ServiceName}}",
				name="{{.Name}}",
				function=getattr(service, "{{.Name}}"),
				input=_pb2.{{.InputType}},
				output=_pb2.{{.OutputType}},
			),{{- end }}
		}


class {{.Name}}Client(ConPyClient):{{range .Methods}}
	def {{.Name}}(
		self,
		*,
		request,
		ctx,
		server_path_prefix="",
		**kwargs,
	):
		return self._make_request(
			url=f"{server_path_prefix}/{{.ServiceURL}}/{{.Name}}",
			ctx=ctx,
			request=request,
			response_obj=_pb2.{{.OutputType}},
			**kwargs,
		){{end}}


class Async{{.Name}}Client(AsyncConPyClient):{{range .Methods}}
	async def {{.Name}}(
        self,
        *,
        request,
        ctx,
        server_path_prefix="",
        session: httpx.AsyncClient | None = None,
        **kwargs,
    ):
		return await self._make_request(
			url=f"{server_path_prefix}/{{.ServiceURL}}/{{.Name}}",
			ctx=ctx,
			request=request,
			response_obj=_pb2.{{.OutputType}},
			session=session,
			**kwargs,
		)
{{end}}{{end}}`))
